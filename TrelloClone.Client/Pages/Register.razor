@page "/register"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Register</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            <h4 class="alert-heading">Registration Failed!</h4>
                            <p><strong>Error:</strong> @_errorMessage</p>
                            <hr>
                            <p class="mb-0">Please check your information and try again.</p>
                        </div>
                    }

                    <EditForm Model="@_registerModel" OnValidSubmit="HandleRegister">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group mb-3">
                            <label for="username">Username</label>
                            <InputText id="username" @bind-Value="_registerModel.Username" class="form-control" />
                            <ValidationMessage For="@(() => _registerModel.Username)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="email">Email</label>
                            <InputText id="email" @bind-Value="_registerModel.Email" class="form-control" />
                            <ValidationMessage For="@(() => _registerModel.Email)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="password">Password</label>
                            <InputText id="password" @bind-Value="_registerModel.Password" type="password" class="form-control" />
                            <ValidationMessage For="@(() => _registerModel.Password)" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@_isLoading">
                                @if (_isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Loading...</span>
                                }
                                else
                                {
                                    <span>Register</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    <div class="mt-3 text-center">
                        <p>Already have an account? <a href="login">Login here</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private TrelloClone.Client.Models.RegisterModel _registerModel = new();
    private bool _isLoading;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        // Redirect if already logged in
        if (await AuthService.IsAuthenticated())
        {
            NavigationManager.NavigateTo("/boards");
        }
    }

    private async Task HandleRegister()
    {
        _isLoading = true;
        _errorMessage = null;

        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "Registration attempt", _registerModel.Email);
            
            var (success, errorMessage) = await AuthService.Register(_registerModel);
            
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("console.log", "Registration successful, redirecting to boards");
                NavigationManager.NavigateTo("/boards");
            }
            else
            {
                _errorMessage = errorMessage ?? "Registration failed. Email may already be in use.";
                await JSRuntime.InvokeVoidAsync("console.error", "Registration failed", _errorMessage);
                await JSRuntime.InvokeVoidAsync("alert", "Registration failed: " + _errorMessage);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", "Registration exception", ex.Message, ex.StackTrace);
            await JSRuntime.InvokeVoidAsync("alert", "Exception: " + ex.Message);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
}
